import depositos.*
import locomotoras.*
import vagones.*
import formaciones.*
import clasesdeVagon.*

describe "test para los depositos" {
	
	var clasePasajero1 = new Pasajero(largo = 10 , anchoUtil = 3 , peso = 800)
	var clasePasajero2 = new Pasajero(largo = 10, anchoUtil = 2, peso = 300)
	var clasePasajero3 = new Pasajero(largo = 10, anchoUtil = 2, peso = 800)
	
	var claseCargaCarbon = new Carga(cargaMaxima = 5500, peso = 1500)
	var claseCargaMadera = new Carga(cargaMaxima = 7500, peso = 1500)
	
	var vagonPasajeros1 = new Vagon(clase = clasePasajero1)
	var vagonPasajeros2 = new Vagon(clase = clasePasajero2)
	var vagonPasajeros3 = new Vagon(clase = clasePasajero3)
	var vagonPasajeros4 = new Vagon(clase = clasePasajero2)
	var vagonPasajeros5 = new Vagon(clase = clasePasajero2)
	var vagonPasajeros6 = new Vagon(clase = clasePasajero1)
	var vagonCargaCarbon = new Vagon(clase = claseCargaCarbon)
	var vagonCargaMadera = new Vagon(clase = claseCargaMadera)
	
	var locomotora1 = new Locomotora(peso = 500, pesoMaximoPuedeArrastrar = 8000, velocidadMaxima = 100)
	var locomotora2 = new Locomotora(peso = 800, pesoMaximoPuedeArrastrar = 10000, velocidadMaxima = 150)
	var locomotora3 = new Locomotora(peso = 800, pesoMaximoPuedeArrastrar = 9000, velocidadMaxima = 120)
	var locomotora4 = new Locomotora(peso = 500, pesoMaximoPuedeArrastrar = 10000, velocidadMaxima = 150)
	var locomotora5 = new Locomotora(peso = 500, pesoMaximoPuedeArrastrar = 10000, velocidadMaxima = 120)
	
	var formacion1 = new Formacion(locomotoras = [locomotora1], vagones = [vagonPasajeros1, vagonPasajeros5])
	var formacion2 = new Formacion(locomotoras = [locomotora3, locomotora2], vagones = [vagonPasajeros2])
	var formacion3 = new Formacion(locomotoras = [locomotora4], vagones = [vagonPasajeros3, vagonPasajeros6])
	
	var depositoCentro = new Deposito(formaciones = [formacion1, formacion2, formacion3], locomotoras = [locomotora5])

test "el conjunto de vagones mas pesados de las formaciones del depositoCentro esta formado por el vagonPasajeros1 (formacion1), el vagonPasajeros2 (formacion2) y el vagonPasajeros6 (formacion3)" {

	assert.equals(depositoCentro.vagonesMasPesados(), [vagonPasajeros1, vagonPasajeros2, vagonPasajeros6])

}

test "el depositoCentro necesita un conductor experimentado, pues la formacion3 pesa mas de 10000 kilos cuando le agrego el vagonCargaMadera" {
	formacion3.vagones().add(vagonCargaMadera)
	assert.that(depositoCentro.necesitaConductorExperimentado())
}

test "al querer agregar una locomotora a la formacion2 el deposito informa que no es necesario" {
	assert.throwsExceptionWithMessage("Esa formacion no necesita locomotora extra", {depositoCentro.agregarLocomotoraA(formacion2)})
}

}